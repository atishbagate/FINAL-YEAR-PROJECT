# -*- coding: utf-8 -*-
"""1st trained algoritm project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hRqYew1B7AeQi8FSse6AW5bffwNSVTo1
"""

import numpy as np
X = [4, 5, 3, 1, 2]
print(np.sort(X))

import numpy as np
import pandas as pd
import matplotlib.pylab as plt
import seaborn as sns
import warnings
warnings.filterwarnings("ignore")
sns.set_style('white')
plt.set_cmap('gist_gray')

!pip install --quiet nibabel
import nibabel as nib

! git clone https://github.com/SimJeg/BrainAge.git

df = pd.read_csv('BrainAge/demographics.csv')
df.head(10)

print('There are {} patients'.format(len(df)))
print('There are {} hospitals'.format(len(df.hospital.unique())))
print('There are {} datasets'.format(len(df.dataset.unique())))
print('There are {:.2f}% of women'.format(100*np.mean(df.sex == 'f')))
print('Age statistics : ')
print(df.age.describe())

plt.figure(figsize=(20,10)) 
plt.subplot(121) 
sns.countplot(y='hospital', data=df)
plt.title('Figure 1. Patient distribution per hospital')

plt.figure(figsize=(20,10)) 
plt.subplot(122)
sns.boxplot(x='age', y='hospital', data=df)
plt.title('Figure 2. Age distribution per hospital');

image = nib.load('BrainAge/input.nii.gz').get_data()
segmentation = nib.load('BrainAge/segmentation.nii.gz').get_data()
# It allows to simply skullstrip the image : 
skullstripped_image = image * (segmentation > 0)
# Choose the dimension : 0 (sagittal), 1 (coronnal) or 2 (axial)
dimension = 2
# Choose the slice (between 0 and 182 or 218)
s = 100

plt.figure(figsize=(10, 5))
print('Shape of the MRI : {}'.format(image.shape))
plt.subplot(131)
plt.imshow(np.take(image, s, dimension))
plt.title('Original');

plt.figure(figsize=(10, 5))
plt.subplot(132)
plt.imshow(np.take(skullstripped_image, s, dimension))
plt.title('Skull Stripped');

plt.figure(figsize=(10, 5))
plt.subplot(133)
plt.imshow(np.take(segmentation, s, dimension), cmap='Paired')
plt.title('Segmented');

plt.figure(figsize=(15, 5))
plt.subplot(121)
# We only use POSITIVE values (background removed) to compute the histogram
plt.hist(skullstripped_image[skullstripped_image > 0], bins=200, density=True);

plt.figure(figsize=(15, 5))
plt.subplot(122)
plt.hist([skullstripped_image[segmentation == i] for i in [1, 2, 3]], 
         stacked=True, bins=200, density=True);

# Load the histograms X for all patients and the ages Y
X = np.load('BrainAge/histograms.npy')
Y = df.age.values
print('Shape of X : {}'.format(np.shape(X)))

# We plot the average histogram in blue
plt.plot(X.mean(0), 'b--')

# And the average histogram per hospital in red using a for loop
for h in df.hospital.unique():
  plt.plot(X[df.hospital == h].mean(0), 'r', alpha=0.2)

# We plot the average histogram in blue
plt.plot(X.mean(0), 'b--')

# And the average histogram per hospital in red using a for loop
for h in df.hospital.unique():
  plt.plot(X[df.hospital == h].mean(0), 'r', alpha=0.2)

10**np.linspace(-3.0, 2.0, 10)

# Scikit Learn is the most popular package for machine learning in python
# We use it to train a linear model with L2 regularization (Ridge Regression)

from sklearn.model_selection import train_test_split
from sklearn.linear_model import RidgeCV
n_patients = len(df)

# We create a function to train and test a linear model

def train_linear_regression(train, test):
    # Create model
    model = RidgeCV()

    # Train on the training set : fit the models with pairs (X, Y)
    model.fit(X[train], Y[train])

    # Predict on the test set
    predictions = model.predict(X[test])
    true_values = Y[test]
    
    # Plot the results and compute the MAE
    plt.scatter(predictions, true_values, s=10)
    plt.grid()
    plt.xlabel('Predictions')
    plt.ylabel('True values')
    mae = np.mean(np.abs(predictions - true_values))
    plt.title('Mean Absolute Error : {:.2f} years'.format(mae))
    plt.show()


# We don't perform 5 fold cross validation here, but a single split

# 1. Random split
# We randomly split the data between train and test with 80/20 proportions
train, test = train_test_split(np.arange(n_patients), test_size=0.2,
                               random_state=0)
print('Random Split')
print('Size of the test set : {} patients'.format(len(test)))
# We use our function on this split
train_linear_regression(train, test)

# 2. Hospital split
# We split the hospitals using Guys hospital as the test set
train = np.where(df.hospital != 'Guys')[0]
test = np.where(df.hospital == 'Guys')[0]
print('Hospital Split')
print('Size of the test set : {} patients'.format(len(test)))
train_linear_regression(train, test)

# We will use the keras package for deep learning models
from keras.models import load_model

model = load_model('BrainAge/cnn_model.h5')



model.summary()

# Get predictions : we first need to prepare the input image
    
X = skullstripped_image

# Step 1 : Normalize Intensities
h, t = np.histogram(X[segmentation == 3], bins=100)
peak_wm = t[np.argmax(h)]
h, t = np.histogram(X[segmentation == 2], bins=100)
peak_gm = t[np.argmax(h)]

X /= peak_wm
C = peak_gm / peak_wm
a = (0.75 - C**2) / (C - C**2)
X[X < 1] = a * X[X < 1] + (1 - a) * X[X < 1]**2
X = np.clip(X, 0, 1.5) / 1.5

# Step 2 : resize the image to get (200, 200) shape

X = X[:, 10:-8, 80:90]
X = np.pad(X, ((9,9), (0,0), (0,0)), mode='constant')
X = np.rollaxis(X, 2, 0)[..., None]

# Step 3 : use the trained model to make the predictions

predictions = 10 * model.predict(X)[:, 0]

real_age = df.age[0]
print('Real age : {:.2f} years'.format(real_age))

print('Number of predictions : {}'.format(len(predictions)))

print('Average prediction : {:.2f} years'.format(np.mean(predictions)))

print('Minimal prediction : {:.2f} years '.format(np.min(predictions)))

print('Maximal prediction : {:.2f} years '.format(np.max(predictions)))